#Generated Form Function
function GenerateForm {
########################################################################
# Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.6.0
# Generated On: 25/06/2015 10:16
# Generated By: GeorgeChe
########################################################################

#region Import the Assemblies
[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
[reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
#endregion

#region Generated Form Objects
$form1 = New-Object System.Windows.Forms.Form
$tabControlUserMachine = New-Object System.Windows.Forms.TabControl
$tabPageMachine = New-Object System.Windows.Forms.TabPage
$machineInfoOutputRTbox = New-Object System.Windows.Forms.RichTextBox
$checkMachineBtn = New-Object System.Windows.Forms.Button
$computerNumberBox = New-Object System.Windows.Forms.TextBox
$tabControlMachineInfo = New-Object System.Windows.Forms.TabControl
$tabPageSoftware = New-Object System.Windows.Forms.TabPage
$usedNetAdaptersBtn = New-Object System.Windows.Forms.Button
$driversInfoBtn = New-Object System.Windows.Forms.Button
$windowInfoBtn = New-Object System.Windows.Forms.Button
$tabPageHardware = New-Object System.Windows.Forms.TabPage
$installedNicBtn = New-Object System.Windows.Forms.Button
$hddInfoBtn = New-Object System.Windows.Forms.Button
$ramInfoBtn = New-Object System.Windows.Forms.Button
$processorInfoBtn = New-Object System.Windows.Forms.Button
$biosInfoBtn = New-Object System.Windows.Forms.Button
$modelInfoBtn = New-Object System.Windows.Forms.Button
$tabPageReports = New-Object System.Windows.Forms.TabPage
$fullMachineReportBtn = New-Object System.Windows.Forms.Button
$servicesReportBtn = New-Object System.Windows.Forms.Button
$elReportBtn = New-Object System.Windows.Forms.Button
$gpReportBtn = New-Object System.Windows.Forms.Button
$tabPageUser = New-Object System.Windows.Forms.TabPage
$tabControlUserInfo = New-Object System.Windows.Forms.TabControl
$tabPageGetUser = New-Object System.Windows.Forms.TabPage
$checkBox1 = New-Object System.Windows.Forms.CheckBox
$button4 = New-Object System.Windows.Forms.Button
$passwordResetBtn = New-Object System.Windows.Forms.Button
$label14 = New-Object System.Windows.Forms.Label
$userBtn = New-Object System.Windows.Forms.Button
$label1 = New-Object System.Windows.Forms.Label
$comboBox1 = New-Object System.Windows.Forms.ComboBox
$userBox = New-Object System.Windows.Forms.TextBox
$label15 = New-Object System.Windows.Forms.Label
$label2 = New-Object System.Windows.Forms.Label
$textBox15 = New-Object System.Windows.Forms.TextBox
$textBox3 = New-Object System.Windows.Forms.TextBox
$label3 = New-Object System.Windows.Forms.Label
$textBox14 = New-Object System.Windows.Forms.TextBox
$textBox4 = New-Object System.Windows.Forms.TextBox
$label13 = New-Object System.Windows.Forms.Label
$label4 = New-Object System.Windows.Forms.Label
$textBox13 = New-Object System.Windows.Forms.TextBox
$textBox5 = New-Object System.Windows.Forms.TextBox
$label12 = New-Object System.Windows.Forms.Label
$label5 = New-Object System.Windows.Forms.Label
$textBox12 = New-Object System.Windows.Forms.TextBox
$textBox6 = New-Object System.Windows.Forms.TextBox
$label11 = New-Object System.Windows.Forms.Label
$label6 = New-Object System.Windows.Forms.Label
$textBox11 = New-Object System.Windows.Forms.TextBox
$textBox7 = New-Object System.Windows.Forms.TextBox
$label10 = New-Object System.Windows.Forms.Label
$label7 = New-Object System.Windows.Forms.Label
$textBox10 = New-Object System.Windows.Forms.TextBox
$textBox8 = New-Object System.Windows.Forms.TextBox
$label9 = New-Object System.Windows.Forms.Label
$label8 = New-Object System.Windows.Forms.Label
$textBox9 = New-Object System.Windows.Forms.TextBox
$tabPageCreateUser = New-Object System.Windows.Forms.TabPage
$button2 = New-Object System.Windows.Forms.Button
$label32 = New-Object System.Windows.Forms.Label
$label31 = New-Object System.Windows.Forms.Label
$label30 = New-Object System.Windows.Forms.Label
$button6 = New-Object System.Windows.Forms.Button
$textBox27 = New-Object System.Windows.Forms.TextBox
$label29 = New-Object System.Windows.Forms.Label
$groupBox3 = New-Object System.Windows.Forms.GroupBox
$richTextBox4 = New-Object System.Windows.Forms.RichTextBox
$groupBox2 = New-Object System.Windows.Forms.GroupBox
$richTextBox3 = New-Object System.Windows.Forms.RichTextBox
$groupBox1 = New-Object System.Windows.Forms.GroupBox
$richTextBox2 = New-Object System.Windows.Forms.RichTextBox
$button5 = New-Object System.Windows.Forms.Button
$checkBox16 = New-Object System.Windows.Forms.CheckBox
$checkBox15 = New-Object System.Windows.Forms.CheckBox
$checkBox14 = New-Object System.Windows.Forms.CheckBox
$checkBox13 = New-Object System.Windows.Forms.CheckBox
$checkBox12 = New-Object System.Windows.Forms.CheckBox
$checkBox11 = New-Object System.Windows.Forms.CheckBox
$checkBox10 = New-Object System.Windows.Forms.CheckBox
$checkBox9 = New-Object System.Windows.Forms.CheckBox
$checkBox8 = New-Object System.Windows.Forms.CheckBox
$checkBox7 = New-Object System.Windows.Forms.CheckBox
$checkBox6 = New-Object System.Windows.Forms.CheckBox
$checkBox5 = New-Object System.Windows.Forms.CheckBox
$checkBox4 = New-Object System.Windows.Forms.CheckBox
$textBox26 = New-Object System.Windows.Forms.TextBox
$textBox25 = New-Object System.Windows.Forms.TextBox
$textBox24 = New-Object System.Windows.Forms.TextBox
$textBox23 = New-Object System.Windows.Forms.TextBox
$textBox22 = New-Object System.Windows.Forms.TextBox
$textBox21 = New-Object System.Windows.Forms.TextBox
$textBox20 = New-Object System.Windows.Forms.TextBox
$textBox19 = New-Object System.Windows.Forms.TextBox
$textBox18 = New-Object System.Windows.Forms.TextBox
$textBox17 = New-Object System.Windows.Forms.TextBox
$textBox16 = New-Object System.Windows.Forms.TextBox
$textBox2 = New-Object System.Windows.Forms.TextBox
$textBox1 = New-Object System.Windows.Forms.TextBox
$label28 = New-Object System.Windows.Forms.Label
$label27 = New-Object System.Windows.Forms.Label
$label26 = New-Object System.Windows.Forms.Label
$label25 = New-Object System.Windows.Forms.Label
$label24 = New-Object System.Windows.Forms.Label
$label23 = New-Object System.Windows.Forms.Label
$label22 = New-Object System.Windows.Forms.Label
$label21 = New-Object System.Windows.Forms.Label
$label20 = New-Object System.Windows.Forms.Label
$label19 = New-Object System.Windows.Forms.Label
$label18 = New-Object System.Windows.Forms.Label
$label17 = New-Object System.Windows.Forms.Label
$label16 = New-Object System.Windows.Forms.Label
$checkBoxDisabledUser = New-Object System.Windows.Forms.CheckBox
$checkBoxRoUser = New-Object System.Windows.Forms.CheckBox
$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
#endregion Generated Form Objects

#----------------------------------------------
#Function definition block
#----------------------------------------------
<#
.Synopsis
   Get Signed Driver information for remote computer
.DESCRIPTION
   Retrieve Signed Driver information from remote or local computer by using the WMI service.
.EXAMPLE
   Get-DriverInfo -Computername $computer
.EXAMPLE
   Get-DriverInfo -ComputerName (Get-Content -Path $path)
#>
function Get-DriverInfo
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        # Can be used for multiple computers
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$ComputerName 
    )

    Process
    {
        foreach($pc in $ComputerName)
        {

            Write-Verbose "Testing Connection to $pc"
            Write-Output "Testing Connection to $pc"

            if(Test-Connection $pc -Count 1 -Quiet)
            {
                Try
                {

                        Write-Verbose "Gathering Data from $pc"
                        Write-Output "Gathering Data from $pc"
                
                        $a = "<style>"
                        $a = $a + "BODY{background-color:#fff;}"
                        $a = $a + "H2{border-right:30px solid #fff;border-left:30px solid #fff;color:#669;padding:12px 2px 0;vertical-align:top;}"
                        $a = $a + "TABLE{font-family:'Lucida Sans Unicode', 'Lucida Grande', Sans-Serif; font-size:12px;width:80%;text-align:left;border-collapse:collapse;margin: 20px auto;border-spacing:0;vertical-align:baseline;}"
                        $a = $a + "TABLE TR:hover td{color:#339;background:#d0dafd;}"
                        $a = $a + "TABLE TH{font-weight:normal;font-size:14px;border-bottom:2px solid #6678b1;border-right:30px solid #fff;border-left:30px solid #fff;color:#039;padding: 8px 2px;}"
                        $a = $a + "TABLE TD{border-right:30px solid #fff;border-left:30px solid #fff;color:#669;padding:12px 2px 0;vertical-align:top;}"
                        $a = $a + "</style>"

                        $data = Get-WmiObject Win32_ComputerSystem -ComputerName $pc | select *
                        $machine = $data.Name
                        $user = $data.UserName

                        $date = Get-Date -Format "dd/MM/yyyy"

                        Write-Verbose "Generating Report"
                        Write-Output "Generating Report for $machine"

                        $drivers =  Get-WmiObject win32_PnPSignedDriver -ComputerName $pc -Filter "DeviceClass != 'LEGACYDRIVER' and Description IS NOT NULL " | select DeviceClass, Description, DriverVersion, @{Expression={[management.managementDateTimeConverter]::ToDateTime($_.DriverDate)};Label="DriverDate"}
                        $drivers | ConvertTo-HTML -head $a -Body "<h2>$machine - $user - $date Drivers </h2>" | Out-File C:\Temp\$pc-Drivers.htm
                
                        Write-Verbose "Saved to C:\Temp\"
                        Write-Output "Saved to C:\Temp\"                  
                              
                }
                Catch
                {
                    Write-Output "Machine $pc not online or PowerShell is unable to read it"
                    Write-Output "$($Error[0])"
                }

            }
            else
            {
                Write-Output "Machine not online"
            }

            Write-Verbose "Report complete for $pc"
            Write-Output "Report complete for $pc"
        }
    }

}

<#
.Synopsis
   Get EventLog information for remote computer
.DESCRIPTION
   Retrieve EventLog information from remote or local computer by using the WMI service.
.EXAMPLE
   Get-EventLogInfo -Computername $computer
.EXAMPLE
   Get-EventLogInfo -ComputerName (Get-Content -Path $path)
#>
function Get-EventLogInfo
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$computername
    )

    Process
    {
        foreach($pc in $computername)
        {

            Write-Verbose "Testing Connection to $pc"
            Write-Output "Testing Connection to $pc"

            if(Test-Connection $pc -Count 1 -Quiet)
            {
                Try
                {
                   
                    Write-Verbose "Gathering Data from $pc"
                    Write-Output "Gathering Data from $pc"

                        $a = "<style>"
                        $a = $a + "BODY{background-color:#fff;}"
                        $a = $a + "H2{border-right:30px solid #fff;border-left:30px solid #fff;color:#669;padding:12px 2px 0;vertical-align:top;}"
                        $a = $a + "TABLE{font-family:'Lucida Sans Unicode', 'Lucida Grande', Sans-Serif; font-size:12px;width:98%;text-align:left;border-collapse:collapse;margin: 20px auto;border-spacing:0;vertical-align:baseline;}"
                        $a = $a + "TABLE TR:hover td{color:#339;background:#d0dafd;}"
                        $a = $a + "TABLE TH{font-weight:normal;font-size:14px;border-bottom:2px solid #6678b1;border-right:30px solid #fff;border-left:30px solid #fff;color:#039;padding: 8px 2px;}"
                        $a = $a + "TABLE TD{border-right:30px solid #fff;border-left:30px solid #fff;color:#669;padding:12px 2px 0;vertical-align:top;}"
                        $a = $a + "</style>"

                        $data = Get-WmiObject Win32_ComputerSystem -ComputerName $pc | select *
                        $machine = $data.Name
                        $user = $data.UserName

                        $date = Get-Date -Format "dd/MM/yyyy"

                        Write-Verbose "Generating Reports"

                        Get-EventLog -LogName System -ComputerName $pc -EntryType Error, Warning -Newest 50 | select EventID, MachineName, Index, EntryType, Message, Source, InstanceId, TimeGenerated, UserName | ConvertTo-HTML -head $a -Body "<h2>$machine - $user - $date EventLog-System </h2>" | Out-File C:\Temp\$pc-EventLog-System.htm
                        Get-EventLog -LogName Application -ComputerName $pc -EntryType Error, Warning -Newest 50 | select EventID, MachineName, Index, EntryType, Message, Source, InstanceId, TimeGenerated, UserName | ConvertTo-HTML -head $a -Body "<h2>$machine - $user - $date EventLog-Application </h2>" | Out-File C:\Temp\$pc-EventLog-Application.htm

                }
                Catch
                {
                    Write-Output "Machine $pc not online or PowerShell is unable to read it"
                    Write-Output "$($Error[0])"
                }
            }
            else
            {
                Write-Output "Machine not online"
            }

            Write-Verbose "Report complete for $pc"
            Write-Output "Report complete for $pc"
        }
    }

}

<#
.Synopsis
   Get Service information for remote computer
.DESCRIPTION
   Retrieve Service information from remote or local computer by using the WMI service.
.EXAMPLE
   Get-ServiceInfo -Computername $computer
.EXAMPLE
   Get-ServiceInfo -ComputerName (Get-Content -Path $path)
#>
function Get-ServiceInfo
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$computername
    )

    Process
    {
        foreach($pc in $computername)
        {

            Write-Verbose "Testing Machine"

            if(Test-Connection $pc -Count 1 -Quiet)
            {
                Try
                {
                    Write-Verbose "Gathering Data"

                    $a = "<style>"
                    $a = $a + "BODY{background-color:#fff;}"
                    $a = $a + "H2{border-right:30px solid #fff;border-left:30px solid #fff;color:#669;padding:12px 2px 0;vertical-align:top;}"
                    $a = $a + "TABLE{font-family:'Lucida Sans Unicode', 'Lucida Grande', Sans-Serif; font-size:12px;width:80%;text-align:left;border-collapse:collapse;margin: 20px auto;border-spacing:0;vertical-align:baseline;}"
                    $a = $a + "TABLE TR:hover td{color:#339;background:#d0dafd;}"
                    $a = $a + "TABLE TH{font-weight:normal;font-size:14px;border-bottom:2px solid #6678b1;border-right:30px solid #fff;border-left:30px solid #fff;color:#039;padding: 8px 2px;}"
                    $a = $a + "TABLE TD{border-right:30px solid #fff;border-left:30px solid #fff;color:#669;padding:12px 2px 0;vertical-align:top;}"
                    $a = $a + "</style>"

                    $data = Get-WmiObject Win32_ComputerSystem -ComputerName $pc | select *
                    $machine = $data.Name
                    $user = $data.UserName

                    $date = Get-Date -Format "dd/MM/yyyy"

                    Write-Verbose "Generating Report"

                    Get-Service -ComputerName $pc | Select-Object Status, Name, DisplayName | Sort-Object Status -Descending | ConvertTo-HTML -head $a -Body "<h2>$machine - $user - $date Services </h2>" | Out-File C:\Temp\$pc-Services.htm

                }
                Catch
                {
                    Write-Output "Machine not online or PowerShell is unable to read it"
                    Write-Output "$($Error[0])"
                }
            }
            else
            {
                Write-Output "Machine not online"
            }
        }
    }

}


<#
.Synopsis
   Get Group Policy Report information for remote user.
.DESCRIPTION
   Retrieve Group Policy Report information for a logged in user on a remote computer.
.EXAMPLE
   Get-GPReport -Computername $computer
#>
function Get-GPReport
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        # Can be used for multiple computers
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$ComputerName
    )

    Process
    {
        Write-Verbose "Testing Connection to $ComputerName"
        Write-Output "Testing Connection to $ComputerName"
        
        if(Test-Connection $ComputerName -Count 1 -Quiet)
        {
            Try
            {
                Write-Verbose "Gathering Data from $ComputerName"
                Write-Output "Gathering Data from $ComputerName"

                $user = Get-WmiObject -Class win32_computersystem -ComputerName $ComputerName | select -expand username
                gpresult /S $ComputerName /user $user /H C:\Temp\GPReport.html /f

                Write-Verbose "Report generated for $ComputerName $user"

            }
            Catch
            {
                Write-Output "Machine not online or PowerShell is unable to read it"
                Write-Output "$($Error[0])"
            }
        }
        else
        {
            Write-Output "Machine not online"
        }

        Write-Verbose "Report complete for $ComputerName"
        Write-Output "Report complete for $ComputerName"
    }
}


<#
.Synopsis
   Get Windows information for remote computer
.DESCRIPTION
   Retrieve Windows information from remote or local computer by using the WMI service.
.EXAMPLE
   Get-WindowsInfo -Computername $computer
.EXAMPLE
   Get-WindowsInfo -ComputerName (Get-Content -Path $path)
#>
function Get-WindowsInfo
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        # Can be used for multiple computers
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$ComputerName
    )

    Process
    {
        foreach($pc in $ComputerName)
        {

            Write-Verbose "Testing Connection to $pc"
            Write-Output "Testing Connection to $pc"

            if(Test-Connection $pc -Count 1 -Quiet)
            {
                Try
                {
                    Write-Verbose "Gathering Data from $pc"
                    Write-Output "Gathering Data from $pc"

                    $windows = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $pc -ErrorAction Stop

                    foreach($win in $windows)
                    {
                            $myobj =  @{

                                'Windows Type' = $windows.Caption
                                'Install Date' =  [management.managementDateTimeConverter]::ToDateTime($windows.InstallDate)
                                'LastBoot UpTime' =  [management.managementDateTimeConverter]::ToDateTime($windows.LastBootUpTime)
                                'OS Architecture' = $windows.OSArchitecture
                                'Serial Number' = $windows.SerialNumber
                                'System Drive' = $windows.SystemDrive
                                'System Directory' = $windows.SystemDirectory
                            }

                        Write-Output (New-Object -TypeName PSObject -Property $myobj)

                    }

                }
                Catch
                {
                    Write-Output "Machine not online or PowerShell is unable to read it"
                    Write-Output "$($Error[0])"
                }
            }
            else
            {
                Write-Output "Machine not online"
            }

            Write-Verbose "Report complete for $pc"
            Write-Output "Report complete for $pc"
        }
    }

}


<#
.Synopsis
   Get Network Adapter and Driver information for remote computer
.DESCRIPTION
   Retrieve Network Adapter and Driver information from remote or local computer by using the WMI service.
.EXAMPLE
   Get-NICInfo -Computername $computer
.EXAMPLE
   Get-NICInfo -ComputerName (Get-Content -Path $path)
#>
function Get-NICInfo
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        # Can be used for multiple computers
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$ComputerName
    )

    Process
    {
        foreach ($pc in $ComputerName)
        {

            Write-Verbose "Testing Connection to $pc"
            Write-Output "Testing Connection to $pc"
        
            if(Test-Connection $pc -Count 1 -Quiet)
            {
                Try
                {
                    Write-Verbose "Gathering Data from $pc"
                    Write-Output "Gathering Data from $pc"
                
                    $nicprops = Get-WmiObject Win32_NetworkAdapter -ComputerName $pc -Filter "PhysicalAdapter = 'True'" | Where-Object { $_.Name -notlike "*Check*" -and $_.Manufacturer -notlike "*Microsoft*" -and $_.Manufacturer -notlike "*VMware*"} | select *

                    $nicdriverprops = Get-WmiObject Win32_PnPSignedDriver -Filter "DeviceClass = 'NET'" -ComputerName $pc | Where-Object { $_.Description -notlike "*Microsoft*" -and $_.Description -notlike "*Check*" -and $_.Description -notlike "*WAN*" -and $_.Description -notlike "*RAS*" } | select *

                    Write-Output "----------Physical Adapters---------"
                
                    foreach ($nicprop in $nicprops)
                    {
                       $netadapt =  @{
                                
                            'Name' = $nicprop.Name
                            'Adapter Type' = $nicprop.AdapterType
                            'Power Management Supported' = $nicprop.PowerManagementSupported
                            'GUID' = $nicprop.GUID
                            'Index' = $nicprop.Index
                            'Interface Index' = $nicprop.InterfaceIndex
                            'MAC Address' = $nicprop.MACAddress
                            'Manufacturer' = $nicprop.Manufacturer
                            'Net Connection ID' = $nicprop.NetConnectionID
                            'Net Connection Status' = switch ($nicprop.NetConnectionStatus)
                                                        {
                                                            0 {"Disconnected"} 
                                                            1 {"Connecting"} 
                                                            2 {"Connected"} 
                                                            3 {"Disconnecting"} 
                                                            4 {"Hardware not present"} 
                                                            5 {"Hardware disabled"} 
                                                            6 {"Hardware malfunction"} 
                                                            7 {"Media disconnected"} 
                                                            8 {"Authenticating"} 
                                                            9 {"Authentication succeeded"} 
                                                            10 {"Authentication failed"} 
                                                            11 {"Invalid address"} 
                                                            12 {"Credentials required"}
                                                        }
                            'Net Enabled' = $nicprop.NetEnabled
                            'PNP Device ID' = $nicprop.PNPDeviceID
                            'Speed (MB/s)' = ($nicprop.Speed /1MB -as [int])
                            'Time Of Last Reset' = [management.managementDateTimeConverter]::ToDateTime($nicprop.TimeOfLastReset)          
                        
                       }
                   
                       Write-Output (New-Object -TypeName PSObject -Property $netadapt ) 
                    }

                    Write-Output "----------Physical Adapters Drivers---------`n"

                    foreach ($nicdriverprop in $nicdriverprops)
                    {
                       $netadaptdriver =  @{
                        
                            'Device Name' = $nicdriverprop.DeviceName
                            'Class Guid' = $nicdriverprop.ClassGuid
                            'Compat ID' = $nicdriverprop.CompatID
                            'Device ID' = $nicdriverprop.DeviceID
                            'Driver Date' = [management.managementDateTimeConverter]::ToDateTime($nicdriverprop.DriverDate)
                            'Driver Version' = $nicdriverprop.DriverVersion
                            'Driver Provider Name' = $nicdriverprop.DriverProviderName
                            'Inf Name' = $nicdriverprop.InfName
                            'Is Signed' = $nicdriverprop.IsSigned
                            'Location' = $nicdriverprop.Location        
                               
                        
                       }
                   
                       Write-Output (New-Object -TypeName PSObject -Property $netadaptdriver ) 
                    }

                }
                Catch
                {
                    Write-Output "Machine $pc not online or PowerShell is unable to read it"
                    Write-Output "$($Error[0])"
                }
            }
            else
            {
                Write-Output "Machine not online"
            }

            Write-Verbose "Report complete for $pc"
            Write-Output "Report complete for $pc"
        }

    }
}


<#
.Synopsis
   Get BIOS information on remote computers
.DESCRIPTION
   Retrieve BIOS information on remote or local computer by using the WMI service. 
.EXAMPLE
   Get-BiosInfo -ComputerName $computer
.EXAMPLE
   Get-BiosInfo -ComputerName (Get-Content -Path $path)
#>
function Get-BiosInfo
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        # Can be used for multiple computers
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$ComputerName
    )

    Process
    {
        foreach($pc in $ComputerName)
        {

            Write-Verbose "Testing Connection to $pc"
            Write-Output "Testing Connection to $pc"
        
            if(Test-Connection $pc -Count 1 -Quiet)
            {
                Try
                {
                    Write-Verbose "Gathering Data from $pc"
                    Write-Output "Gathering Data from $pc"
                
                    $bioses = Get-WmiObject -Class Win32_Bios -ComputerName $pc

                    foreach ($bios in $bioses)
                    {
                       $myobj =  @{

                            'Status' = $bios.Status
                            'Name' = $bios.Name
                            'Current Language' = $bios.CurrentLanguage
                            'Release Date' = [management.managementDateTimeConverter]::ToDateTime($bios.ReleaseDate)
                            'SMB Version' = $bios.SMBIOSBIOSVersion
                            'Serial Number' = $bios.SerialNumber
                            'Version' = $bios.Version

                       }
                   
                       Write-Output (New-Object -TypeName PSObject -Property $myobj)
                    }

                }
                Catch
                {
                    Write-Output "Machine $pc not online or PowerShell is unable to read it"
                    Write-Output "$($Error[0])"
                }
            }
            else
            {
                Write-Output "Machine not online"
            }

            Write-Verbose "Report complete for $pc"
            Write-Output "Report complete for $pc"
        }
    }
}


<#
.Synopsis
.Synopsis
   Get Connected Network Adapter information for remote computer
.DESCRIPTION
   Retrieve Connected Network Adapter information from remote or local computer by using the WMI service.
.EXAMPLE
   Get-ConnectedNic -Computername $computer
.EXAMPLE
   Get-ConnectedNic -ComputerName (Get-Content -Path $path)
#>
function Get-ConnectedNic
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        # Can be used for multiple computers
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$ComputerName
    )

    Process
    {
        foreach($pc in $ComputerName)
        {

            Write-Verbose "Testing Connection to $pc"
            Write-Output "Testing Connection to $pc"
        
            if(Test-Connection $pc -Count 1 -Quiet)
            {
                Try
                {
                   foreach($pc in $pc)
                
                   { 
                        Write-Verbose "Gathering Data from $pc"
                        Write-Output "Gathering Data from $pc"
                
                        $connectednics = Get-WmiObject -Class Win32_NetworkAdapterConfiguration -ComputerName $pc -Filter "ipenabled = 'true'" | select *

                        foreach ($connectednic in $connectednics)
                        {
                           $myobj =  @{

                                    'Description' = $connectednic.Description
                                    'IP Enabled' = $connectednic.IPEnabled
                                    'IP Address' = ($connectednic.IPAddress -join "`n")
                                    'IP Filter Security Enabled' = $connectednic.IPFilterSecurityEnabled
                                    'DHCP Enabled' = $connectednic.DHCPEnabled
                                    'DHCP Server' = $connectednic.DHCPServer
                                    'DHCP Lease Obtained' = [management.managementDateTimeConverter]::ToDateTime($connectednic.DHCPLeaseObtained)
                                    'DHCP Lease Expires' = [management.managementDateTimeConverter]::ToDateTime($connectednic.DHCPLeaseExpires)
                                    'DNS Domain' = $connectednic.DNSDomain
                                    'DNS Domain Suffix Search Order' = ($connectednic.DNSDomainSuffixSearchOrder -join "`n")
                                    'DNS Enabled For WINS Resolution' = $connectednic.DNSEnabledForWINSResolution
                                    'DNS Server Search Order' = ($connectednic.DNSServerSearchOrder -join "`n" )
                                    'Domain DNS Registration Enabled' = $connectednic.DomainDNSRegistrationEnabled
                                    'Full DNS Registration Enabled' = $connectednic.FullDNSRegistrationEnabled
                                    'IP Connection Metric' = $connectednic.IPConnectionMetric
                                    'WINS Enable LM Hosts Lookup' = $connectednic.WINSEnableLMHostsLookup
                                    'WINS Primary Server' = $connectednic.WINSPrimaryServer
                                    'WINS Secondary Server' = $connectednic.WINSSecondaryServer
                                    'Default IP Gateway' = ($connectednic.DefaultIPGateway -join "`n")
                                    'IP Subnet' = ($connectednic.IPSubnet -join "`n")
                                    'MAC Address' = $connectednic.MACAddress
                                    'Tcp ip Netbios Options' = $connectednic.TcpipNetbiosOptions
                                    'Tcp Window Size' = $connectednic.TcpWindowSize
                                    'Setting ID' = $connectednic.SettingID
                        
                           }
                   
                           Write-Output (New-Object -TypeName PSObject -Property $myobj ) 
                        }

                    }

                }
                Catch
                {
                    Write-Output "Machine $pc not online or PowerShell is unable to read it"
                    Write-Output "$($Error[0])"
                }
            }
            else
            {
                Write-Output "Machine not online"
            }

            Write-Verbose "Report complete for $pc"
            Write-Output "Report complete for $pc"
        }
    }
}


<#
.Synopsis
   Get Hard Disk information for remote computer
.DESCRIPTION
   Retrieve Hard Disk information from remote or local computer by using the WMI service.
.EXAMPLE
   Get-HDDInof -Computername $computer
.EXAMPLE
   Get-HDDInfo -ComputerName (Get-Content -Path $path)
#>
function Get-HDDInfo
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        # Can be used for multiple computers
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$ComputerName
    )

    Process
    {

        foreach($pc in $ComputerName)
        {

            Write-Verbose "Testing Connection to $pc"
            Write-Output "Testing Connection to $pc"
        
            if(Test-Connection $pc -Count 1 -Quiet)
            {
                Try
                {
                    Write-Verbose "Gathering Data from $pc"
                    Write-Output "Gathering Data from $pc"
                
                    $harddrives = Get-WmiObject -Class win32_DiskDrive -ComputerName $pc

                    foreach ($harddrive in $harddrives)
                    {
                       $myobj =  @{

                            'Status' = $harddrive.Status
                            'Index' = $harddrive.Index
                            'Device ID' = $harddrive.DeviceID
                            'Name' = $harddrive.Name
                            'Model' = $harddrive.Model
                            'Serial Number' = ($harddrive.SerialNumber).Trim()
                            'Partitions' = $harddrive.Partitions
                            'Bytes Per Sector' = $harddrive.BytesPerSector
                            'Interface Type' = $harddrive.InterfaceType
                            'Sectors Per Track' = $harddrive.SectorsPerTrack
                            'Size (GB)' = ($harddrive.Size / 1GB -as [int])
                            'Total Cylinders' = $harddrive.TotalCylinders
                            'Total Heads' = $harddrive.TotalHeads
                            'Total Sectors' = $harddrive.TotalSectors
                            'Total Tracks' = $harddrive.TotalTracks
                            'Tracks Per Cylinder' = $harddrive.TracksPerCylinder
                            'Media Loaded' = $harddrive.MediaLoaded
                            'Media Type' = $harddrive.MediaType
                            'Signature' = $harddrive.Signature

                       }
                   
                       Write-Output (New-Object -TypeName PSObject -Property $myobj ) 
                    }

                }
                Catch
                {
                    Write-Output "Machine not online or PowerShell is unable to read it"
                    Write-Output "$($Error[0])"
                }
            }
            else
            {
                Write-Output "Machine not online"
            }

            Write-Verbose "Report complete for $pc"
            Write-Output "Report complete for $pc"
        }
    }
}


<#
.Synopsis
   Get Memory information for remote computer
.DESCRIPTION
   Retrieve Memory information from remote or local computer by using the WMI service.
.EXAMPLE
   Get-MemoryInfo -Computername $computer
.EXAMPLE
   Get-MemoryInfo -ComputerName (Get-Content -Path $path)
#>
function Get-MemoryInfo
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        # Can be used for multiple computers
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$ComputerName
    )

    Process
    {
        foreach($pc in $ComputerName)
        {

            Write-Verbose "Testing Connection to $pc"
            Write-Output "Testing Connection to $pc"
        
            if(Test-Connection $pc -Count 1 -Quiet)
            {
                Try
                {
                    Write-Verbose "Gathering Data from $pc"
                    Write-Output "Gathering Data from $pc"
                
                    $memories = Get-WmiObject -Class Win32_PhysicalMemory -ComputerName $pc

                    foreach ($memory in $memories)
                    {
                       $myobj =  @{
                        
                            'Manufacturer' = $memory.Manufacturer
                            'Caption' = $memory.Caption
                            'Tag' = $memory.Tag
                            'Capacity' = ($memory.Capacity /1GB -as [int])
                            'Bank Label' = $memory.BankLabel
                            'Device Locator' = $memory.DeviceLocator
                            'Form Factor' = switch ($memory.FormFactor)
                                                {
                                                    0 {"Unknown"}
                                                    1 {"Other"}
                                                    2 {"SIP"}
                                                    3 {"DIP"}
                                                    4 {"ZIP"}
                                                    5 {"SOJ"}
                                                    6 {"Proprietary"}
                                                    7 {"SIMM"}
                                                    8 {"DIMM"}
                                                    9 {"TSOP"}
                                                    10 {"PGA"}
                                                    11 {"RIMM"}
                                                    12 {"SODIMM"}
                                                    13 {"SRIMM"}
                                                    14 {"SMD"}
                                                    15 {"SSMP"}
                                                    16 {"QFP"}
                                                    17 {"TQFP"}
                                                    18 {"SOIC"}
                                                    19 {"LCC"}
                                                    20 {"PLCC"}
                                                    21 {"BGA"}
                                                    22 {"FPBGA"}
                                                    23 {"LGA"}
                                                    default {"Could not determine type of installed RAM"}
                                                }
                            'Interleave Data Depth' = $memory.InterleaveDataDepth
                            'Interleave Position' = switch ($memory.InterleavePosition)
                                                        {
                                                            0 {"Noninterleaved"}
                                                            1 {"First position"}
                                                            2 {"Second position"}
                                                            default {"Could not determine"}
                                                        }
                            'Memory Type' = switch ($memory.MemoryType)
                                                {
                                                0 {"Unknown"}
                                                1 {"Other"}
                                                2 {"DRAM"}
                                                3 {"Synchronous DRAM"}
                                                4 {"Cache DRAM"}
                                                5 {"EDO"}
                                                6 {"EDRAM"}
                                                7 {"VRAM"}
                                                8 {"SRAM"}
                                                9 {"RAM"}
                                                10 {"ROM"}
                                                11 {"Flash"}
                                                12 {"EEPROM"}
                                                13 {"FEPROM"}
                                                14 {"EPROM"}
                                                15 {"CDRAM"}
                                                16 {"3DRAM"}
                                                17 {"SDRAM"}
                                                18 {"SGRAM"}
                                                19 {"RDRAM"}
                                                20 {"DDR"}
                                                21 {"DDR2"}
                                                22 {"DDR2 FB-DIMM"}
                                                24 {"DDR3"}
                                                25 {"FBD2"}
                                                default {"Could not determine type of installed RAM"}
                                                }
                            'Part Number' = $memory.PartNumber
                            'Serial Number' = $memory.SerialNumber
                            'Speed (MHz)' = $memory.Speed
                            'Total Width' = $memory.TotalWidth
                            'Type Detail' = switch ($memory.TypeDetail)
                                                {
                                                    1 {"Reserved"} 
                                                    2 {"Other"} 
                                                    4 {"Unknown"} 
                                                    8 {"Fast-paged"} 
                                                    16 {"Static column"} 
                                                    32 {"Pseudo-static"} 
                                                    64 {"RAMBUS"} 
                                                    128 {"Synchronous"} 
                                                    256 {"CMOS"} 
                                                    512 {"EDO"} 
                                                    1024 {"Window DRAM"}
                                                    2048 {"Cache DRAM"}
                                                    4096 {"Nonvolatile"}
                                                }
                       }
                   
                       Write-Output (New-Object -TypeName PSObject -Property $myobj ) 
                    }

                }
                Catch
                {
                    Write-Output "Machine $pc not online or PowerShell is unable to read it"
                    Write-Output "$($Error[0])"
                }
            }
            else
            {
                Write-Output "Machine not online"
            }

            Write-Verbose "Report complete for $pc"
            Write-Output "Report complete for $pc"
        }
        
    }
}


<#
.Synopsis
   Get Model infromation for remote computer
.DESCRIPTION
   Retrieve Model information from remote or local computer by using the WMI service.
.EXAMPLE
   Get-ModelInfo -ComputerName $pc
.EXAMPLE
   Get-ModelInfo -ComputerName (Get-Content -Path $path)
#>
function Get-ModelInfo
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        # Can be used for multiple computers
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$ComputerName
    )

    Process
    {
        foreach($pc in $ComputerName)
        {

            Write-Verbose "Testing Connection to $pc"
            Write-Output "Testing Connection to $pc"
        
            if(Test-Connection $pc -Count 1 -Quiet)
            {
                Try
                {
                    Write-Verbose "Gathering Data from $pc"
                    Write-Output "Gathering Data from $pc"
                
                    $models = Get-WmiObject -Class win32_computersystem -ComputerName $pc

                    foreach ($model in $models)
                    {
                       $myobj =  @{
                        
                            'Name' = $model.Name
                            'Status' = $model.Status
                            'Domain' = $model.Domain
                            'Manufacturer' = $model.Manufacturer
                            'Model' = $model.Model
                            'System Type' =  switch ($model.PCSystemType)
                                                  {
                                                    0 {"Unspecified"} 
                                                    1 {"Desktop"} 
                                                    2 {"Laptop"} 
                                                    3 {"Workstation"} 
                                                    4 {"Enterprise Server"} 
                                                    5 {"Small Office and Home Office (SOHO) Server"} 
                                                    6 {"Appliance PC"} 
                                                    7 {"Performance Server"} 
                                                    8 {"Maximum"}
                                                  }#End of Switch
                            'Installed RAM (GB)' = ($model.TotalPhysicalMemory / 1GB -as [int])
                            'CPU(s)' = $model.NumberOfProcessors
                            'Cores' = $model.NumberOfLogicalProcessors

                       }#End of custom object
                   
                       Write-Output (New-Object -TypeName PSObject -Property $myobj ) 
                    }#End of foreach

                }#End of try
                Catch
                {
                    Write-Output "Machine $pc not online or PowerShell is unable to read it"
                    Write-Output "$($Error[0])"
                }
            }
            else
            {
                Write-Output "Machine not online"
            }

            Write-Output "Report Complete for $pc"
            Write-Verbose "Report Complete for $pc"
        }#End of foreach machine

    }
}


<#
.Synopsis
   Get Partition information on remote computers
.DESCRIPTION
   Retrieve Partition information on remote or local computer by using the WMI service.
.EXAMPLE
   Get-PartitionInfo -ComputerName $computer
.EXAMPLE
   Get-PartitionInfo -ComputerName (Get-Content -Path $path)
#>
function Get-PartitionInfo
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        # Can be used for multiple computers
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$ComputerName
    )

    Process
    {
        foreach($pc in $ComputerName)
        {

            Write-Verbose "Testing Connection to $pc"
            Write-Output "Testing Connection to $pc"
        
            if(Test-Connection $pc -Count 1 -Quiet)
            {
                Try
                {
                    Write-Verbose "Gathering Data from $pc"
                    Write-Output "Gathering Data from $pc"

                    $partitions = Get-WmiObject -Class Win32_logicaldisk -ComputerName $pc

                    #iterate through each element of each partition to create the custom object
                    foreach ($partition in $partitions)
                    {
                        foreach ($item in $partition)
                        {
                            if($partition.Size -gt 0)
                            {
                        
                                $part =  @{

                                                    'Volume Name' = $partition.VolumeName
                                                    'Name' = $partition.Name
                                                    'Compressed' = $partition.Compressed
                                                    'Drive Type' = switch ($partition.DriveType)
                                                                                                        {
                                                                        0 {"Unknown"} 
                                                                        1 {"No Root Directory"}
                                                                        2 {"Removable Disk"} 
                                                                        3 {"Local Disk"} 
                                                                        4 {"Network Drive"} 
                                                                        5 {"Compact Disc"} 
                                                                        6 {"RAM Disk"}
                                                                    }
                                                    'Drive Size (GB)' = ($partition.Size /1GB -as [int])
                                                    'Free Space (GB)' = ($partition.FreeSpace /1GB -as [int])
                                                    'Free Space' = ("{0:P2}" -f ($partition.FreeSpace / $partition.Size))
                                                    'Volume Serial Number' = $partition.VolumeSerialNumber
                                                                                
                                               }

                            }
                            else
                            {
                                $part =  @{

                                                    #'Volume Name' = $partition.VolumeName
                                                    'Name' = $partition.Name
                                                    #'Compressed' = $partition.Compressed
                                                    'Drive Type' = switch ($partition.DriveType)
                                                                    {
                                                                        0 {"Unknown"} 
                                                                        1 {"No Root Directory"}
                                                                        2 {"Removable Disk"} 
                                                                        3 {"Local Disk"} 
                                                                        4 {"Network Drive"} 
                                                                        5 {"Compact Disc"} 
                                                                        6 {"RAM Disk"}
                                                                    }
                                                    #'Drive Size (GB)' = ($partition.Size /1GB -as [int])
                                                    #'Free Space (GB)' = ($partition.FreeSpace /1GB -as [int])
                                                    #'Free Space (%)' = ("{0:P2}" -f ($partition.FreeSpace / $partition.Size) -as [int])
                                                    #'VolumeSerialNumber' = $partition.VolumeSerialNumber
                                                    }
                            }
                        }
                  
                        Write-Output (New-Object -TypeName PSObject -Property $part)
                  
                    }

                }
                Catch
                {
                    Write-Output "Machine not online or PowerShell is unable to read it"
                    Write-Output "$($Error[0])"
                }
            }
            else
            {
                Write-Output "Machine not online"
            }

            Write-Verbose "Report complete for $pc"
            Write-Output "Report complete for $pc"
        }
    }

}


<#
.Synopsis
   Get Processor infromation for remote computer
.DESCRIPTION
   Retrieve Processor information from remote or local computer by using the WMI service.
.EXAMPLE
   Get-ProcessorInfo -ComputerName $pc
.EXAMPLE
   Get-ProcessorInfo -ComputerName (Get-Content -Path $path)
#>
function Get-ProcessorInfo
{
    [CmdletBinding()]
    Param
    (
        # Computer Name
        # Can be used for multiple computers
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=0)]
        [string[]]$ComputerName
    )

    Process
    {
        foreach($pc in $ComputerName)
        {

            Write-Verbose "Testing Connection to $pc"
            Write-Output "Testing Connection to $pc"
        
            if(Test-Connection $pc -Count 1 -Quiet)
            {
                Try
                {
                    Write-Verbose "Gathering Data from $pc"
                    Write-Output "Gathering Data from $pc"
                
                    $processors = Get-WmiObject -Class win32_processor -ComputerName $pc

                    foreach ($processor in $processors)
                    {
                       $myobj =  @{
                        
                            'Status' = $processor.Status
                            'Model' = $processor.Description
                            'Name' = $processor.Name
                            'Address Width' = $processor.AddressWidth
                            'Data Width' = $processor.DataWidth
                            'ExtClock' = $processor.ExtClock
                            'L2Cache Size (KB)' = $processor.L2CacheSize
                            'L3Cache Size (KB)' = $processor.L3CacheSize
                            'Max Clock Speed (MHz)' = $processor.MaxClockSpeed
                            'Current Voltage' = $processors.CurrentVoltage
                        
                       }
                   
                       Write-Output (New-Object -TypeName PSObject -Property $myobj ) 
                    }

                }
                Catch
                {
                    Write-Output "Machine $pc not online or PowerShell is unable to read it"
                    Write-Output "$($Error[0])"
                }
            }
            else
            {
                Write-Output "Machine not online"
            }

            Write-Verbose "Report complete for $pc"
            Write-Output "Report complete for $pc"
        }
    }
}



#----------------------------------------------
#Function definition endregion
#----------------------------------------------

#----------------------------------------------
#Generated Event Script Blocks
#----------------------------------------------
#Provide Custom Code for events specified in PrimalForms.
$biosInfo= 
{
	$machineInfoOutputRTbox.Text = Get-BiosInfo -ComputerName $computerNumberBox.Text  | Out-String
}

$checkMachine= 
{
	$machineInfoOutputRTbox.Text = ping $computerNumberBox.Text  | Out-String
}

$userBtn_OnClick= 
{
	
}

$button4_OnClick= 
{
#TODO: Place custom script here

}

$button6_OnClick= 
{
#TODO: Place custom script here

}

$passwordResetBtn_OnClick= 
{
#TODO: Place custom script here

}

$installedNic= 
{
	$machineInfoOutputRTbox.Text = Get-NICInfo -ComputerName $computerNumberBox.Text  | Out-String
}

$servicesReport= 
{
	$machineInfoOutputRTbox.Text = "Generating Services report"
	Get-ServiceInfo -ComputerName $computerNumberBox.Text
	$machineInfoOutputRTbox.Text = "Report Complete, saved in C:\Temp\"
}

$processorInfo= 
{
	$machineInfoOutputRTbox.Text = Get-ProcessorInfo -ComputerName $computerNumberBox.Text  | Out-String
}

$fullMachineReport= 
{
        $machineInfoOutputRTbox.Text = "------------------- Bios Info -----------------------------`n"
		$machineInfoOutputRTbox.Text += Get-BiosInfo -ComputerName $computerNumberBox.Text  | Out-String
		$machineInfoOutputRTbox.Text += "------------------- Connected Nic -------------------------`n"
		$machineInfoOutputRTbox.Text += Get-ConnectedNic -ComputerName $computerNumberBox.Text  | Out-String
		$machineInfoOutputRTbox.Text += "------------------- HDD Info ------------------------------`n"
		$machineInfoOutputRTbox.Text += Get-HDDInfo -ComputerName $computerNumberBox.Text  | Out-String
		$machineInfoOutputRTbox.Text += "------------------- Memory Info ---------------------------`n"
		$machineInfoOutputRTbox.Text += Get-MemoryInfo -ComputerName $computerNumberBox.Text  | Out-String
		$machineInfoOutputRTbox.Text += "------------------- Model Info ----------------------------`n"
		$machineInfoOutputRTbox.Text += Get-ModelInfo -ComputerName $computerNumberBox.Text  | Out-String
		$machineInfoOutputRTbox.Text += "------------------- Partition Info ------------------------`n"
		$machineInfoOutputRTbox.Text += Get-PartitionInfo -ComputerName $computerNumberBox.Text  | Out-String
		$machineInfoOutputRTbox.Text += "------------------- Processor Info ------------------------`n"
		$machineInfoOutputRTbox.Text += Get-ProcessorInfo -ComputerName $computerNumberBox.Text  | Out-String
		$machineInfoOutputRTbox.Text += "------------------- NIC Info ------------------------------`n"
		$machineInfoOutputRTbox.Text += Get-NICInfo -ComputerName $computerNumberBox.Text  | Out-String
		$machineInfoOutputRTbox.Text += "------------------- Windows Info --------------------------`n"
		$machineInfoOutputRTbox.Text += Get-WindowsInfo -ComputerName $computerNumberBox.Text  | Out-String
		$machineInfoOutputRTbox.SaveFile("C:\Temp\Hardware-Report.rtf")
		Get-ServiceInfo -ComputerName $computerNumberBox.Text
		Get-EventLogInfo -ComputerName $computerNumberBox.Text
		Get-GPReport -ComputerName $computerNumberBox.Text
		Get-DriverInfo -ComputerName $computerNumberBox.Text	
}

$usedNetAdapters= 
{
	$machineInfoOutputRTbox.Text = Get-ConnectedNic -ComputerName $computerNumberBox.Text  | Out-String
}

$driversInfo= 
{
		$machineInfoOutputRTbox.Text = "Generating Driver report"
        Get-DriverInfo -ComputerName $computerNumberBox.Text
		$machineInfoOutputRTbox.Text = "Report Complete, saved in C:\Temp\"
}

$button5_OnClick= 
{
#TODO: Place custom script here

}

$hddInfo= 
{
	$machineInfoOutputRTbox.Text = Get-HDDInfo -ComputerName $computerNumberBox.Text  | Out-String
}

$windowsInfo= 
{
	$machineInfoOutputRTbox.Text = Get-WindowsInfo -ComputerName $computerNumberBox.Text  | Out-String
}

$elReport= 
{
        $machineInfoOutputRTbox.Text = "Generating Event Log report"
        Get-EventLogInfo -ComputerName $computerNumberBox.Text
		$machineInfoOutputRTbox.Text = "Report Complete, saved in C:\Temp\"
}

$gpReport= 
{
        $machineInfoOutputRTbox.Text = "Generating Group Policy report"
        Get-GPReport -ComputerName $computerNumberBox.Text
		$machineInfoOutputRTbox.Text = "Report Complete, saved in C:\Temp\"
}

$ramInfo= 
{
	$machineInfoOutputRTbox.Text = Get-MemoryInfo -ComputerName $computerNumberBox.Text  | Out-String
}

$button2_OnClick= 
{
#TODO: Place custom script here

}

$modelInfo= 
{
	$machineInfoOutputRTbox.Text = Get-ModelInfo -ComputerName $computerNumberBox.Text  | Out-String
}

$checktagnumber= 
{
		if($_.KeyCode -eq 'Enter')
		{
			&$checkMachine
		}
}


$OnLoadForm_StateCorrection=
{#Correct the initial state of the form to prevent the .Net maximized form issue
	$form1.WindowState = $InitialFormWindowState
}

#----------------------------------------------
#region Generated Form Code
$form1.Font = New-Object System.Drawing.Font("Consolas",11.25,0,3,1)
$form1.Text = "IT Support Tool Beta V0.7.3"
$form1.Name = "form1"
$form1.SizeGripStyle = 1
$form1.StartPosition = 1
$form1.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 1139
$System_Drawing_Size.Height = 817
$form1.ClientSize = $System_Drawing_Size
$form1.FormBorderStyle = 6

$tabControlUserMachine.TabIndex = 0
$tabControlUserMachine.Appearance = 2
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 1115
$System_Drawing_Size.Height = 793
$tabControlUserMachine.Size = $System_Drawing_Size
$tabControlUserMachine.Anchor = 15
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 12
$System_Drawing_Point.Y = 12
$tabControlUserMachine.Location = $System_Drawing_Point
$tabControlUserMachine.DataBindings.DefaultDataSourceUpdateMode = 0
$tabControlUserMachine.Name = "tabControlUserMachine"
$tabControlUserMachine.SelectedIndex = 0

$form1.Controls.Add($tabControlUserMachine)
$tabPageMachine.TabIndex = 1
$tabPageMachine.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 1107
$System_Drawing_Size.Height = 759
$tabPageMachine.Size = $System_Drawing_Size
$tabPageMachine.Text = "Machine Info"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 4
$System_Drawing_Point.Y = 30
$tabPageMachine.Location = $System_Drawing_Point
$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
$System_Windows_Forms_Padding.All = 3
$System_Windows_Forms_Padding.Bottom = 3
$System_Windows_Forms_Padding.Left = 3
$System_Windows_Forms_Padding.Right = 3
$System_Windows_Forms_Padding.Top = 3
$tabPageMachine.Padding = $System_Windows_Forms_Padding
$tabPageMachine.Name = "tabPageMachine"
$tabPageMachine.DataBindings.DefaultDataSourceUpdateMode = 0

$tabControlUserMachine.Controls.Add($tabPageMachine)
$machineInfoOutputRTbox.Name = "machineInfoOutputRTbox"
$machineInfoOutputRTbox.Anchor = 15
$machineInfoOutputRTbox.Text = ""
$machineInfoOutputRTbox.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 0
$System_Drawing_Point.Y = 0
$machineInfoOutputRTbox.Location = $System_Drawing_Point
$machineInfoOutputRTbox.BorderStyle = 1
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 877
$System_Drawing_Size.Height = 759
$machineInfoOutputRTbox.Size = $System_Drawing_Size
$machineInfoOutputRTbox.TabIndex = 3

$tabPageMachine.Controls.Add($machineInfoOutputRTbox)

$checkMachineBtn.TabIndex = 2
$checkMachineBtn.Anchor = 9
$checkMachineBtn.Name = "checkMachineBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 224
$System_Drawing_Size.Height = 29
$checkMachineBtn.Size = $System_Drawing_Size
$checkMachineBtn.UseVisualStyleBackColor = $True

$checkMachineBtn.Text = "Check Machine"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 883
$System_Drawing_Point.Y = 31
$checkMachineBtn.Location = $System_Drawing_Point
$checkMachineBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$checkMachineBtn.add_Click($checkMachine)

$tabPageMachine.Controls.Add($checkMachineBtn)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 224
$System_Drawing_Size.Height = 25
$computerNumberBox.Size = $System_Drawing_Size
$computerNumberBox.DataBindings.DefaultDataSourceUpdateMode = 0
$computerNumberBox.TextAlign = 2
$computerNumberBox.Anchor = 9
$computerNumberBox.Name = "computerNumberBox"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 883
$System_Drawing_Point.Y = 0
$computerNumberBox.Location = $System_Drawing_Point
$computerNumberBox.TabIndex = 1
$computerNumberBox.add_KeyDown($checktagnumber)

$tabPageMachine.Controls.Add($computerNumberBox)

$tabControlMachineInfo.TabIndex = 0
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 224
$System_Drawing_Size.Height = 693
$tabControlMachineInfo.Size = $System_Drawing_Size
$tabControlMachineInfo.Anchor = 11
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 883
$System_Drawing_Point.Y = 66
$tabControlMachineInfo.Location = $System_Drawing_Point
$tabControlMachineInfo.DataBindings.DefaultDataSourceUpdateMode = 0
$tabControlMachineInfo.Name = "tabControlMachineInfo"
$tabControlMachineInfo.SelectedIndex = 0

$tabPageMachine.Controls.Add($tabControlMachineInfo)
$tabPageSoftware.TabIndex = 0
$tabPageSoftware.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 216
$System_Drawing_Size.Height = 662
$tabPageSoftware.Size = $System_Drawing_Size
$tabPageSoftware.Text = "Software"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 4
$System_Drawing_Point.Y = 27
$tabPageSoftware.Location = $System_Drawing_Point
$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
$System_Windows_Forms_Padding.All = 3
$System_Windows_Forms_Padding.Bottom = 3
$System_Windows_Forms_Padding.Left = 3
$System_Windows_Forms_Padding.Right = 3
$System_Windows_Forms_Padding.Top = 3
$tabPageSoftware.Padding = $System_Windows_Forms_Padding
$tabPageSoftware.Name = "tabPageSoftware"
$tabPageSoftware.DataBindings.DefaultDataSourceUpdateMode = 0

$tabControlMachineInfo.Controls.Add($tabPageSoftware)
$usedNetAdaptersBtn.TabIndex = 2
$usedNetAdaptersBtn.Name = "usedNetAdaptersBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$usedNetAdaptersBtn.Size = $System_Drawing_Size
$usedNetAdaptersBtn.UseVisualStyleBackColor = $True

$usedNetAdaptersBtn.Text = "Used Net Adapters"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 93
$usedNetAdaptersBtn.Location = $System_Drawing_Point
$usedNetAdaptersBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$usedNetAdaptersBtn.add_Click($usedNetAdapters)

$tabPageSoftware.Controls.Add($usedNetAdaptersBtn)

$driversInfoBtn.TabIndex = 1
$driversInfoBtn.Name = "driversInfoBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$driversInfoBtn.Size = $System_Drawing_Size
$driversInfoBtn.UseVisualStyleBackColor = $True

$driversInfoBtn.Text = "Drivers Info"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 50
$driversInfoBtn.Location = $System_Drawing_Point
$driversInfoBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$driversInfoBtn.add_Click($driversInfo)

$tabPageSoftware.Controls.Add($driversInfoBtn)

$windowInfoBtn.TabIndex = 0
$windowInfoBtn.Name = "windowInfoBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$windowInfoBtn.Size = $System_Drawing_Size
$windowInfoBtn.UseVisualStyleBackColor = $True

$windowInfoBtn.Text = "Windows Info"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 7
$windowInfoBtn.Location = $System_Drawing_Point
$windowInfoBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$windowInfoBtn.add_Click($windowsInfo)

$tabPageSoftware.Controls.Add($windowInfoBtn)


$tabPageHardware.TabIndex = 1
$tabPageHardware.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 216
$System_Drawing_Size.Height = 667
$tabPageHardware.Size = $System_Drawing_Size
$tabPageHardware.Text = "Hardware"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 4
$System_Drawing_Point.Y = 22
$tabPageHardware.Location = $System_Drawing_Point
$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
$System_Windows_Forms_Padding.All = 3
$System_Windows_Forms_Padding.Bottom = 3
$System_Windows_Forms_Padding.Left = 3
$System_Windows_Forms_Padding.Right = 3
$System_Windows_Forms_Padding.Top = 3
$tabPageHardware.Padding = $System_Windows_Forms_Padding
$tabPageHardware.Name = "tabPageHardware"
$tabPageHardware.DataBindings.DefaultDataSourceUpdateMode = 0

$tabControlMachineInfo.Controls.Add($tabPageHardware)
$installedNicBtn.TabIndex = 5
$installedNicBtn.Name = "installedNicBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$installedNicBtn.Size = $System_Drawing_Size
$installedNicBtn.UseVisualStyleBackColor = $True

$installedNicBtn.Text = "Installed Net Adapters"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 222
$installedNicBtn.Location = $System_Drawing_Point
$installedNicBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$installedNicBtn.add_Click($installedNic)

$tabPageHardware.Controls.Add($installedNicBtn)

$hddInfoBtn.TabIndex = 4
$hddInfoBtn.Name = "hddInfoBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$hddInfoBtn.Size = $System_Drawing_Size
$hddInfoBtn.UseVisualStyleBackColor = $True

$hddInfoBtn.Text = "HDD Info"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 179
$hddInfoBtn.Location = $System_Drawing_Point
$hddInfoBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$hddInfoBtn.add_Click($hddInfo)

$tabPageHardware.Controls.Add($hddInfoBtn)

$ramInfoBtn.TabIndex = 3
$ramInfoBtn.Name = "ramInfoBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$ramInfoBtn.Size = $System_Drawing_Size
$ramInfoBtn.UseVisualStyleBackColor = $True

$ramInfoBtn.Text = "RAM Info"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 136
$ramInfoBtn.Location = $System_Drawing_Point
$ramInfoBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$ramInfoBtn.add_Click($ramInfo)

$tabPageHardware.Controls.Add($ramInfoBtn)

$processorInfoBtn.TabIndex = 2
$processorInfoBtn.Name = "processorInfoBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$processorInfoBtn.Size = $System_Drawing_Size
$processorInfoBtn.UseVisualStyleBackColor = $True

$processorInfoBtn.Text = "Processor Info"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 93
$processorInfoBtn.Location = $System_Drawing_Point
$processorInfoBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$processorInfoBtn.add_Click($processorInfo)

$tabPageHardware.Controls.Add($processorInfoBtn)

$biosInfoBtn.TabIndex = 1
$biosInfoBtn.Name = "biosInfoBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$biosInfoBtn.Size = $System_Drawing_Size
$biosInfoBtn.UseVisualStyleBackColor = $True

$biosInfoBtn.Text = "Bios Info"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 50
$biosInfoBtn.Location = $System_Drawing_Point
$biosInfoBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$biosInfoBtn.add_Click($biosInfo)

$tabPageHardware.Controls.Add($biosInfoBtn)

$modelInfoBtn.TabIndex = 0
$modelInfoBtn.Name = "modelInfoBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$modelInfoBtn.Size = $System_Drawing_Size
$modelInfoBtn.UseVisualStyleBackColor = $True

$modelInfoBtn.Text = "Model Info"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 7
$modelInfoBtn.Location = $System_Drawing_Point
$modelInfoBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$modelInfoBtn.add_Click($modelInfo)

$tabPageHardware.Controls.Add($modelInfoBtn)


$tabPageReports.TabIndex = 2
$tabPageReports.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 216
$System_Drawing_Size.Height = 662
$tabPageReports.Size = $System_Drawing_Size
$tabPageReports.Text = "Reports"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 4
$System_Drawing_Point.Y = 27
$tabPageReports.Location = $System_Drawing_Point
$tabPageReports.Name = "tabPageReports"
$tabPageReports.DataBindings.DefaultDataSourceUpdateMode = 0

$tabControlMachineInfo.Controls.Add($tabPageReports)
$fullMachineReportBtn.TabIndex = 3
$fullMachineReportBtn.Name = "fullMachineReportBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$fullMachineReportBtn.Size = $System_Drawing_Size
$fullMachineReportBtn.UseVisualStyleBackColor = $True

$fullMachineReportBtn.Text = "Full Machine Report"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 135
$fullMachineReportBtn.Location = $System_Drawing_Point
$fullMachineReportBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$fullMachineReportBtn.add_Click($fullMachineReport)

$tabPageReports.Controls.Add($fullMachineReportBtn)

$servicesReportBtn.TabIndex = 2
$servicesReportBtn.Name = "servicesReportBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$servicesReportBtn.Size = $System_Drawing_Size
$servicesReportBtn.UseVisualStyleBackColor = $True

$servicesReportBtn.Text = "Services Report"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 92
$servicesReportBtn.Location = $System_Drawing_Point
$servicesReportBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$servicesReportBtn.add_Click($servicesReport)

$tabPageReports.Controls.Add($servicesReportBtn)

$elReportBtn.TabIndex = 1
$elReportBtn.Name = "elReportBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$elReportBtn.Size = $System_Drawing_Size
$elReportBtn.UseVisualStyleBackColor = $True

$elReportBtn.Text = "Event Log Report"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 49
$elReportBtn.Location = $System_Drawing_Point
$elReportBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$elReportBtn.add_Click($elReport)

$tabPageReports.Controls.Add($elReportBtn)

$gpReportBtn.TabIndex = 0
$gpReportBtn.Name = "gpReportBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 203
$System_Drawing_Size.Height = 36
$gpReportBtn.Size = $System_Drawing_Size
$gpReportBtn.UseVisualStyleBackColor = $True

$gpReportBtn.Text = "Group Policy Report"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 7
$gpReportBtn.Location = $System_Drawing_Point
$gpReportBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$gpReportBtn.add_Click($gpReport)

$tabPageReports.Controls.Add($gpReportBtn)




$tabPageUser.TabIndex = 0
$tabPageUser.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 1107
$System_Drawing_Size.Height = 759
$tabPageUser.Size = $System_Drawing_Size
$tabPageUser.Text = "User Info"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 4
$System_Drawing_Point.Y = 30
$tabPageUser.Location = $System_Drawing_Point
$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
$System_Windows_Forms_Padding.All = 3
$System_Windows_Forms_Padding.Bottom = 3
$System_Windows_Forms_Padding.Left = 3
$System_Windows_Forms_Padding.Right = 3
$System_Windows_Forms_Padding.Top = 3
$tabPageUser.Padding = $System_Windows_Forms_Padding
$tabPageUser.Name = "tabPageUser"
$tabPageUser.DataBindings.DefaultDataSourceUpdateMode = 0

$tabControlUserMachine.Controls.Add($tabPageUser)
$tabControlUserInfo.TabIndex = 31
$tabControlUserInfo.Appearance = 2
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 1107
$System_Drawing_Size.Height = 752
$tabControlUserInfo.Size = $System_Drawing_Size
$tabControlUserInfo.Visible = $False
$tabControlUserInfo.Anchor = 15
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 0
$System_Drawing_Point.Y = 7
$tabControlUserInfo.Location = $System_Drawing_Point
$tabControlUserInfo.DataBindings.DefaultDataSourceUpdateMode = 0
$tabControlUserInfo.Name = "tabControlUserInfo"
$tabControlUserInfo.SelectedIndex = 0

$tabPageUser.Controls.Add($tabControlUserInfo)
$tabPageGetUser.TabIndex = 0
$tabPageGetUser.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 1099
$System_Drawing_Size.Height = 718
$tabPageGetUser.Size = $System_Drawing_Size
$tabPageGetUser.Text = "Get User"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 4
$System_Drawing_Point.Y = 30
$tabPageGetUser.Location = $System_Drawing_Point
$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
$System_Windows_Forms_Padding.All = 3
$System_Windows_Forms_Padding.Bottom = 3
$System_Windows_Forms_Padding.Left = 3
$System_Windows_Forms_Padding.Right = 3
$System_Windows_Forms_Padding.Top = 3
$tabPageGetUser.Padding = $System_Windows_Forms_Padding
$tabPageGetUser.Name = "tabPageGetUser"
$tabPageGetUser.DataBindings.DefaultDataSourceUpdateMode = 0

$tabControlUserInfo.Controls.Add($tabPageGetUser)

$checkBox1.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 160
$System_Drawing_Size.Height = 24
$checkBox1.Size = $System_Drawing_Size
$checkBox1.TabIndex = 33
$checkBox1.Text = "Never Expires"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 562
$System_Drawing_Point.Y = 490
$checkBox1.Location = $System_Drawing_Point
$checkBox1.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox1.Name = "checkBox1"


$tabPageGetUser.Controls.Add($checkBox1)

$button4.TabIndex = 32
$button4.Name = "button4"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 172
$System_Drawing_Size.Height = 25
$button4.Size = $System_Drawing_Size
$button4.UseVisualStyleBackColor = $True

$button4.Text = "Update Description"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 550
$System_Drawing_Point.Y = 105
$button4.Location = $System_Drawing_Point
$button4.DataBindings.DefaultDataSourceUpdateMode = 0
$button4.add_Click($button4_OnClick)

$tabPageGetUser.Controls.Add($button4)

$passwordResetBtn.TabIndex = 31
$passwordResetBtn.Name = "passwordResetBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 140
$System_Drawing_Size.Height = 25
$passwordResetBtn.Size = $System_Drawing_Size
$passwordResetBtn.UseVisualStyleBackColor = $True

$passwordResetBtn.Text = "Reset Password"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 416
$System_Drawing_Point.Y = 489
$passwordResetBtn.Location = $System_Drawing_Point
$passwordResetBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$passwordResetBtn.add_Click($passwordResetBtn_OnClick)

$tabPageGetUser.Controls.Add($passwordResetBtn)

$label14.TabIndex = 26
$label14.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label14.Size = $System_Drawing_Size
$label14.Text = "Full Path"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 633
$label14.Location = $System_Drawing_Point
$label14.DataBindings.DefaultDataSourceUpdateMode = 0
$label14.Name = "label14"

$tabPageGetUser.Controls.Add($label14)

$userBtn.TabIndex = 30
$userBtn.Name = "userBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 128
$System_Drawing_Size.Height = 25
$userBtn.Size = $System_Drawing_Size
$userBtn.UseVisualStyleBackColor = $True

$userBtn.Text = "Get User"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 416
$System_Drawing_Point.Y = 9
$userBtn.Location = $System_Drawing_Point
$userBtn.DataBindings.DefaultDataSourceUpdateMode = 0
$userBtn.add_Click($userBtn_OnClick)

$tabPageGetUser.Controls.Add($userBtn)

$label1.TabIndex = 0
$label1.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label1.Size = $System_Drawing_Size
$label1.Text = "Username"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 9
$label1.Location = $System_Drawing_Point
$label1.DataBindings.DefaultDataSourceUpdateMode = 0
$label1.Name = "label1"

$tabPageGetUser.Controls.Add($label1)

$comboBox1.FormattingEnabled = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 515
$System_Drawing_Size.Height = 26
$comboBox1.Size = $System_Drawing_Size
$comboBox1.DataBindings.DefaultDataSourceUpdateMode = 0
$comboBox1.Name = "comboBox1"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 678
$comboBox1.Location = $System_Drawing_Point
$comboBox1.TabIndex = 29

$tabPageGetUser.Controls.Add($comboBox1)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 214
$System_Drawing_Size.Height = 25
$userBox.Size = $System_Drawing_Size
$userBox.DataBindings.DefaultDataSourceUpdateMode = 0
$userBox.Name = "userBox"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 9
$userBox.Location = $System_Drawing_Point
$userBox.TabIndex = 1

$tabPageGetUser.Controls.Add($userBox)

$label15.TabIndex = 28
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label15.Size = $System_Drawing_Size
$label15.Text = "Member Of"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 681
$label15.Location = $System_Drawing_Point
$label15.DataBindings.DefaultDataSourceUpdateMode = 0
$label15.Name = "label15"

$tabPageGetUser.Controls.Add($label15)

$label2.TabIndex = 2
$label2.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label2.Size = $System_Drawing_Size
$label2.Text = "Display Name"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 57
$label2.Location = $System_Drawing_Point
$label2.DataBindings.DefaultDataSourceUpdateMode = 0
$label2.Name = "label2"

$tabPageGetUser.Controls.Add($label2)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 515
$System_Drawing_Size.Height = 25
$textBox15.Size = $System_Drawing_Size
$textBox15.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox15.ReadOnly = $True
$textBox15.Name = "textBox15"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 633
$textBox15.Location = $System_Drawing_Point
$textBox15.TabIndex = 27

$tabPageGetUser.Controls.Add($textBox15)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 349
$System_Drawing_Size.Height = 25
$textBox3.Size = $System_Drawing_Size
$textBox3.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox3.ReadOnly = $True
$textBox3.Name = "textBox3"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 57
$textBox3.Location = $System_Drawing_Point
$textBox3.TabIndex = 3

$tabPageGetUser.Controls.Add($textBox3)

$label3.TabIndex = 4
$label3.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label3.Size = $System_Drawing_Size
$label3.Text = "Description"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 105
$label3.Location = $System_Drawing_Point
$label3.DataBindings.DefaultDataSourceUpdateMode = 0
$label3.Name = "label3"

$tabPageGetUser.Controls.Add($label3)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 214
$System_Drawing_Size.Height = 25
$textBox14.Size = $System_Drawing_Size
$textBox14.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox14.ReadOnly = $True
$textBox14.Name = "textBox14"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 585
$textBox14.Location = $System_Drawing_Point
$textBox14.TabIndex = 25

$tabPageGetUser.Controls.Add($textBox14)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 349
$System_Drawing_Size.Height = 25
$textBox4.Size = $System_Drawing_Size
$textBox4.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox4.Name = "textBox4"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 105
$textBox4.Location = $System_Drawing_Point
$textBox4.TabIndex = 5

$tabPageGetUser.Controls.Add($textBox4)

$label13.TabIndex = 24
$label13.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label13.Size = $System_Drawing_Size
$label13.Text = "Last Modified"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 585
$label13.Location = $System_Drawing_Point
$label13.DataBindings.DefaultDataSourceUpdateMode = 0
$label13.Name = "label13"

$tabPageGetUser.Controls.Add($label13)

$label4.TabIndex = 6
$label4.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label4.Size = $System_Drawing_Size
$label4.Text = "Office"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 153
$label4.Location = $System_Drawing_Point
$label4.DataBindings.DefaultDataSourceUpdateMode = 0
$label4.Name = "label4"

$tabPageGetUser.Controls.Add($label4)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 214
$System_Drawing_Size.Height = 25
$textBox13.Size = $System_Drawing_Size
$textBox13.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox13.ReadOnly = $True
$textBox13.Name = "textBox13"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 537
$textBox13.Location = $System_Drawing_Point
$textBox13.TabIndex = 23

$tabPageGetUser.Controls.Add($textBox13)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 214
$System_Drawing_Size.Height = 25
$textBox5.Size = $System_Drawing_Size
$textBox5.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox5.ReadOnly = $True
$textBox5.Name = "textBox5"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 153
$textBox5.Location = $System_Drawing_Point
$textBox5.TabIndex = 7

$tabPageGetUser.Controls.Add($textBox5)

$label12.TabIndex = 22
$label12.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label12.Size = $System_Drawing_Size
$label12.Text = "Creation Date"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 537
$label12.Location = $System_Drawing_Point
$label12.DataBindings.DefaultDataSourceUpdateMode = 0
$label12.Name = "label12"

$tabPageGetUser.Controls.Add($label12)

$label5.TabIndex = 8
$label5.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label5.Size = $System_Drawing_Size
$label5.Text = "Manager"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 201
$label5.Location = $System_Drawing_Point
$label5.DataBindings.DefaultDataSourceUpdateMode = 0
$label5.Name = "label5"

$tabPageGetUser.Controls.Add($label5)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 214
$System_Drawing_Size.Height = 25
$textBox12.Size = $System_Drawing_Size
$textBox12.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox12.ReadOnly = $True
$textBox12.Name = "textBox12"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 489
$textBox12.Location = $System_Drawing_Point
$textBox12.TabIndex = 21

$tabPageGetUser.Controls.Add($textBox12)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 349
$System_Drawing_Size.Height = 25
$textBox6.Size = $System_Drawing_Size
$textBox6.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox6.ReadOnly = $True
$textBox6.Name = "textBox6"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 201
$textBox6.Location = $System_Drawing_Point
$textBox6.TabIndex = 9

$tabPageGetUser.Controls.Add($textBox6)

$label11.TabIndex = 20
$label11.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label11.Size = $System_Drawing_Size
$label11.Text = "Password Last Set"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 489
$label11.Location = $System_Drawing_Point
$label11.DataBindings.DefaultDataSourceUpdateMode = 0
$label11.Name = "label11"

$tabPageGetUser.Controls.Add($label11)

$label6.TabIndex = 10
$label6.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label6.Size = $System_Drawing_Size
$label6.Text = "Home Drive"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 249
$label6.Location = $System_Drawing_Point
$label6.DataBindings.DefaultDataSourceUpdateMode = 0
$label6.Name = "label6"

$tabPageGetUser.Controls.Add($label6)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 214
$System_Drawing_Size.Height = 25
$textBox11.Size = $System_Drawing_Size
$textBox11.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox11.ReadOnly = $True
$textBox11.Name = "textBox11"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 438
$textBox11.Location = $System_Drawing_Point
$textBox11.TabIndex = 19

$tabPageGetUser.Controls.Add($textBox11)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 349
$System_Drawing_Size.Height = 25
$textBox7.Size = $System_Drawing_Size
$textBox7.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox7.ReadOnly = $True
$textBox7.Name = "textBox7"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 249
$textBox7.Location = $System_Drawing_Point
$textBox7.TabIndex = 11

$tabPageGetUser.Controls.Add($textBox7)

$label10.TabIndex = 18
$label10.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label10.Size = $System_Drawing_Size
$label10.Text = "Account Status"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 441
$label10.Location = $System_Drawing_Point
$label10.DataBindings.DefaultDataSourceUpdateMode = 0
$label10.Name = "label10"

$tabPageGetUser.Controls.Add($label10)

$label7.TabIndex = 12
$label7.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label7.Size = $System_Drawing_Size
$label7.Text = "Last Logon ~"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 297
$label7.Location = $System_Drawing_Point
$label7.DataBindings.DefaultDataSourceUpdateMode = 0
$label7.Name = "label7"

$tabPageGetUser.Controls.Add($label7)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 214
$System_Drawing_Size.Height = 25
$textBox10.Size = $System_Drawing_Size
$textBox10.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox10.ReadOnly = $True
$textBox10.Name = "textBox10"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 393
$textBox10.Location = $System_Drawing_Point
$textBox10.TabIndex = 17

$tabPageGetUser.Controls.Add($textBox10)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 214
$System_Drawing_Size.Height = 25
$textBox8.Size = $System_Drawing_Size
$textBox8.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox8.ReadOnly = $True
$textBox8.Name = "textBox8"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 297
$textBox8.Location = $System_Drawing_Point
$textBox8.TabIndex = 13

$tabPageGetUser.Controls.Add($textBox8)

$label9.TabIndex = 16
$label9.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label9.Size = $System_Drawing_Size
$label9.Text = "Lockout Time"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 393
$label9.Location = $System_Drawing_Point
$label9.DataBindings.DefaultDataSourceUpdateMode = 0
$label9.Name = "label9"

$tabPageGetUser.Controls.Add($label9)

$label8.TabIndex = 14
$label8.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 25
$label8.Size = $System_Drawing_Size
$label8.Text = "Lockout Status"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 345
$label8.Location = $System_Drawing_Point
$label8.DataBindings.DefaultDataSourceUpdateMode = 0
$label8.Name = "label8"

$tabPageGetUser.Controls.Add($label8)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 214
$System_Drawing_Size.Height = 25
$textBox9.Size = $System_Drawing_Size
$textBox9.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox9.ReadOnly = $True
$textBox9.Name = "textBox9"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 195
$System_Drawing_Point.Y = 345
$textBox9.Location = $System_Drawing_Point
$textBox9.TabIndex = 15

$tabPageGetUser.Controls.Add($textBox9)


$tabPageCreateUser.TabIndex = 1
$tabPageCreateUser.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 1099
$System_Drawing_Size.Height = 723
$tabPageCreateUser.Size = $System_Drawing_Size
$tabPageCreateUser.Text = "Create User"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 4
$System_Drawing_Point.Y = 25
$tabPageCreateUser.Location = $System_Drawing_Point
$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
$System_Windows_Forms_Padding.All = 3
$System_Windows_Forms_Padding.Bottom = 3
$System_Windows_Forms_Padding.Left = 3
$System_Windows_Forms_Padding.Right = 3
$System_Windows_Forms_Padding.Top = 3
$tabPageCreateUser.Padding = $System_Windows_Forms_Padding
$tabPageCreateUser.Name = "tabPageCreateUser"
$tabPageCreateUser.DataBindings.DefaultDataSourceUpdateMode = 0

$tabControlUserInfo.Controls.Add($tabPageCreateUser)
$button2.TabIndex = 51
$button2.Name = "button2"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 104
$System_Drawing_Size.Height = 39
$button2.Size = $System_Drawing_Size
$button2.UseVisualStyleBackColor = $True

$button2.Text = "button2"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 6
$button2.Location = $System_Drawing_Point
$button2.DataBindings.DefaultDataSourceUpdateMode = 0
$button2.add_Click($button2_OnClick)

$tabPageCreateUser.Controls.Add($button2)

$label32.TabIndex = 50
$label32.TextAlign = 32
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 156
$System_Drawing_Size.Height = 35
$label32.Size = $System_Drawing_Size
$label32.Text = "label32"
$label32.Font = New-Object System.Drawing.Font("Consolas",14.25,0,3,1)
$label32.ForeColor = [System.Drawing.Color]::FromArgb(255,255,0,0)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 675
$System_Drawing_Point.Y = 539
$label32.Location = $System_Drawing_Point
$label32.DataBindings.DefaultDataSourceUpdateMode = 0
$label32.Name = "label32"

$tabPageCreateUser.Controls.Add($label32)

$label31.TabIndex = 49
$label31.TextAlign = 32
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 183
$System_Drawing_Size.Height = 35
$label31.Size = $System_Drawing_Size
$label31.Text = "Current DC:"
$label31.Font = New-Object System.Drawing.Font("Consolas",20.25,0,3,1)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 486
$System_Drawing_Point.Y = 539
$label31.Location = $System_Drawing_Point
$label31.DataBindings.DefaultDataSourceUpdateMode = 0
$label31.Name = "label31"

$tabPageCreateUser.Controls.Add($label31)

$label30.TabIndex = 48
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 573
$System_Drawing_Size.Height = 23
$label30.Size = $System_Drawing_Size
$label30.Text = "Make sure everything checks out before creating the user"
$label30.Font = New-Object System.Drawing.Font("Consolas",14.25,1,3,1)
$label30.ForeColor = [System.Drawing.Color]::FromArgb(255,255,0,0)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 521
$System_Drawing_Point.Y = 446
$label30.Location = $System_Drawing_Point
$label30.DataBindings.DefaultDataSourceUpdateMode = 0
$label30.Name = "label30"

$tabPageCreateUser.Controls.Add($label30)

$button6.TabIndex = 47
$button6.Name = "button6"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 116
$System_Drawing_Size.Height = 23
$button6.Size = $System_Drawing_Size
$button6.UseVisualStyleBackColor = $True

$button6.Text = "Generate New"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 874
$System_Drawing_Point.Y = 492
$button6.Location = $System_Drawing_Point
$button6.DataBindings.DefaultDataSourceUpdateMode = 0
$button6.add_Click($button6_OnClick)

$tabPageCreateUser.Controls.Add($button6)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 276
$System_Drawing_Size.Height = 25
$textBox27.Size = $System_Drawing_Size
$textBox27.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox27.ReadOnly = $True
$textBox27.Name = "textBox27"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 592
$System_Drawing_Point.Y = 492
$textBox27.Location = $System_Drawing_Point
$textBox27.TabIndex = 46

$tabPageCreateUser.Controls.Add($textBox27)

$label29.TabIndex = 45
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label29.Size = $System_Drawing_Size
$label29.Text = "Password"
$label29.Font = New-Object System.Drawing.Font("Consolas",14.25,0,3,1)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 486
$System_Drawing_Point.Y = 492
$label29.Location = $System_Drawing_Point
$label29.DataBindings.DefaultDataSourceUpdateMode = 0
$label29.Name = "label29"

$tabPageCreateUser.Controls.Add($label29)

$groupBox3.Name = "groupBox3"

$groupBox3.Text = "Other Options"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 292
$System_Drawing_Size.Height = 201
$groupBox3.Size = $System_Drawing_Size
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 802
$System_Drawing_Point.Y = 227
$groupBox3.Location = $System_Drawing_Point
$groupBox3.TabStop = $False
$groupBox3.TabIndex = 44
$groupBox3.DataBindings.DefaultDataSourceUpdateMode = 0

$tabPageCreateUser.Controls.Add($groupBox3)
$richTextBox4.Name = "richTextBox4"
$richTextBox4.ReadOnly = $True
$richTextBox4.Text = ""
$richTextBox4.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 24
$richTextBox4.Location = $System_Drawing_Point
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 279
$System_Drawing_Size.Height = 169
$richTextBox4.Size = $System_Drawing_Size
$richTextBox4.TabIndex = 0

$groupBox3.Controls.Add($richTextBox4)


$groupBox2.Name = "groupBox2"

$groupBox2.Text = "Full Address"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 317
$System_Drawing_Size.Height = 200
$groupBox2.Size = $System_Drawing_Size
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 479
$System_Drawing_Point.Y = 227
$groupBox2.Location = $System_Drawing_Point
$groupBox2.TabStop = $False
$groupBox2.TabIndex = 43
$groupBox2.DataBindings.DefaultDataSourceUpdateMode = 0

$tabPageCreateUser.Controls.Add($groupBox2)
$richTextBox3.Name = "richTextBox3"
$richTextBox3.ReadOnly = $True
$richTextBox3.Text = ""
$richTextBox3.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 25
$richTextBox3.Location = $System_Drawing_Point
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 304
$System_Drawing_Size.Height = 169
$richTextBox3.Size = $System_Drawing_Size
$richTextBox3.TabIndex = 0

$groupBox2.Controls.Add($richTextBox3)


$groupBox1.Name = "groupBox1"

$groupBox1.Text = "Warnings"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 615
$System_Drawing_Size.Height = 200
$groupBox1.Size = $System_Drawing_Size
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 479
$System_Drawing_Point.Y = 7
$groupBox1.Location = $System_Drawing_Point
$groupBox1.TabStop = $False
$groupBox1.TabIndex = 42
$groupBox1.DataBindings.DefaultDataSourceUpdateMode = 0

$tabPageCreateUser.Controls.Add($groupBox1)
$richTextBox2.Name = "richTextBox2"
$richTextBox2.ReadOnly = $True
$richTextBox2.Text = ""
$richTextBox2.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 24
$richTextBox2.Location = $System_Drawing_Point
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 602
$System_Drawing_Size.Height = 169
$richTextBox2.Size = $System_Drawing_Size
$richTextBox2.TabIndex = 0

$groupBox1.Controls.Add($richTextBox2)


$button5.TabIndex = 41
$button5.Name = "button5"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 100
$button5.Size = $System_Drawing_Size
$button5.UseVisualStyleBackColor = $True

$button5.Text = "Create User"
$button5.Font = New-Object System.Drawing.Font("Consolas",27.75,1,3,1)
$button5.ForeColor = [System.Drawing.Color]::FromArgb(255,255,0,0)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 612
$button5.Location = $System_Drawing_Point
$button5.DataBindings.DefaultDataSourceUpdateMode = 0
$button5.add_Click($button5_OnClick)

$tabPageCreateUser.Controls.Add($button5)


$checkBox16.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox16.Size = $System_Drawing_Size
$checkBox16.TabIndex = 40
$checkBox16.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 582
$checkBox16.Location = $System_Drawing_Point
$checkBox16.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox16.Name = "checkBox16"


$tabPageCreateUser.Controls.Add($checkBox16)


$checkBox15.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox15.Size = $System_Drawing_Size
$checkBox15.TabIndex = 39
$checkBox15.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 539
$checkBox15.Location = $System_Drawing_Point
$checkBox15.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox15.Name = "checkBox15"


$tabPageCreateUser.Controls.Add($checkBox15)


$checkBox14.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox14.Size = $System_Drawing_Size
$checkBox14.TabIndex = 38
$checkBox14.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 492
$checkBox14.Location = $System_Drawing_Point
$checkBox14.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox14.Name = "checkBox14"


$tabPageCreateUser.Controls.Add($checkBox14)


$checkBox13.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox13.Size = $System_Drawing_Size
$checkBox13.TabIndex = 37
$checkBox13.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 447
$checkBox13.Location = $System_Drawing_Point
$checkBox13.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox13.Name = "checkBox13"


$tabPageCreateUser.Controls.Add($checkBox13)


$checkBox12.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox12.Size = $System_Drawing_Size
$checkBox12.TabIndex = 36
$checkBox12.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 404
$checkBox12.Location = $System_Drawing_Point
$checkBox12.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox12.Name = "checkBox12"


$tabPageCreateUser.Controls.Add($checkBox12)


$checkBox11.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox11.Size = $System_Drawing_Size
$checkBox11.TabIndex = 35
$checkBox11.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 361
$checkBox11.Location = $System_Drawing_Point
$checkBox11.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox11.Name = "checkBox11"


$tabPageCreateUser.Controls.Add($checkBox11)


$checkBox10.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox10.Size = $System_Drawing_Size
$checkBox10.TabIndex = 34
$checkBox10.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 315
$checkBox10.Location = $System_Drawing_Point
$checkBox10.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox10.Name = "checkBox10"


$tabPageCreateUser.Controls.Add($checkBox10)


$checkBox9.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox9.Size = $System_Drawing_Size
$checkBox9.TabIndex = 33
$checkBox9.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 271
$checkBox9.Location = $System_Drawing_Point
$checkBox9.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox9.Name = "checkBox9"


$tabPageCreateUser.Controls.Add($checkBox9)


$checkBox8.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox8.Size = $System_Drawing_Size
$checkBox8.TabIndex = 32
$checkBox8.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 228
$checkBox8.Location = $System_Drawing_Point
$checkBox8.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox8.Name = "checkBox8"


$tabPageCreateUser.Controls.Add($checkBox8)


$checkBox7.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox7.Size = $System_Drawing_Size
$checkBox7.TabIndex = 31
$checkBox7.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 184
$checkBox7.Location = $System_Drawing_Point
$checkBox7.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox7.Name = "checkBox7"


$tabPageCreateUser.Controls.Add($checkBox7)


$checkBox6.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox6.Size = $System_Drawing_Size
$checkBox6.TabIndex = 30
$checkBox6.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 143
$checkBox6.Location = $System_Drawing_Point
$checkBox6.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox6.Name = "checkBox6"


$tabPageCreateUser.Controls.Add($checkBox6)


$checkBox5.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox5.Size = $System_Drawing_Size
$checkBox5.TabIndex = 29
$checkBox5.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 99
$checkBox5.Location = $System_Drawing_Point
$checkBox5.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox5.Name = "checkBox5"


$tabPageCreateUser.Controls.Add($checkBox5)


$checkBox4.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 59
$System_Drawing_Size.Height = 24
$checkBox4.Size = $System_Drawing_Size
$checkBox4.TabIndex = 28
$checkBox4.Text = "Edit"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 414
$System_Drawing_Point.Y = 57
$checkBox4.Location = $System_Drawing_Point
$checkBox4.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBox4.Name = "checkBox4"


$tabPageCreateUser.Controls.Add($checkBox4)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox26.Size = $System_Drawing_Size
$textBox26.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox26.ReadOnly = $True
$textBox26.Name = "textBox26"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 581
$textBox26.Location = $System_Drawing_Point
$textBox26.TabIndex = 27

$tabPageCreateUser.Controls.Add($textBox26)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox25.Size = $System_Drawing_Size
$textBox25.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox25.ReadOnly = $True
$textBox25.Name = "textBox25"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 538
$textBox25.Location = $System_Drawing_Point
$textBox25.TabIndex = 26

$tabPageCreateUser.Controls.Add($textBox25)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox24.Size = $System_Drawing_Size
$textBox24.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox24.ReadOnly = $True
$textBox24.Name = "textBox24"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 491
$textBox24.Location = $System_Drawing_Point
$textBox24.TabIndex = 25

$tabPageCreateUser.Controls.Add($textBox24)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox23.Size = $System_Drawing_Size
$textBox23.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox23.ReadOnly = $True
$textBox23.Name = "textBox23"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 446
$textBox23.Location = $System_Drawing_Point
$textBox23.TabIndex = 24

$tabPageCreateUser.Controls.Add($textBox23)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox22.Size = $System_Drawing_Size
$textBox22.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox22.ReadOnly = $True
$textBox22.Name = "textBox22"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 403
$textBox22.Location = $System_Drawing_Point
$textBox22.TabIndex = 23

$tabPageCreateUser.Controls.Add($textBox22)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox21.Size = $System_Drawing_Size
$textBox21.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox21.ReadOnly = $True
$textBox21.Name = "textBox21"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 360
$textBox21.Location = $System_Drawing_Point
$textBox21.TabIndex = 22

$tabPageCreateUser.Controls.Add($textBox21)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox20.Size = $System_Drawing_Size
$textBox20.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox20.ReadOnly = $True
$textBox20.Name = "textBox20"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 314
$textBox20.Location = $System_Drawing_Point
$textBox20.TabIndex = 21

$tabPageCreateUser.Controls.Add($textBox20)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox19.Size = $System_Drawing_Size
$textBox19.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox19.ReadOnly = $True
$textBox19.Name = "textBox19"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 270
$textBox19.Location = $System_Drawing_Point
$textBox19.TabIndex = 20

$tabPageCreateUser.Controls.Add($textBox19)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox18.Size = $System_Drawing_Size
$textBox18.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox18.ReadOnly = $True
$textBox18.Name = "textBox18"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 227
$textBox18.Location = $System_Drawing_Point
$textBox18.TabIndex = 19

$tabPageCreateUser.Controls.Add($textBox18)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox17.Size = $System_Drawing_Size
$textBox17.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox17.ReadOnly = $True
$textBox17.Name = "textBox17"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 183
$textBox17.Location = $System_Drawing_Point
$textBox17.TabIndex = 18

$tabPageCreateUser.Controls.Add($textBox17)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox16.Size = $System_Drawing_Size
$textBox16.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox16.ReadOnly = $True
$textBox16.Name = "textBox16"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 142
$textBox16.Location = $System_Drawing_Point
$textBox16.TabIndex = 17

$tabPageCreateUser.Controls.Add($textBox16)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox2.Size = $System_Drawing_Size
$textBox2.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox2.ReadOnly = $True
$textBox2.Name = "textBox2"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 98
$textBox2.Location = $System_Drawing_Point
$textBox2.TabIndex = 16

$tabPageCreateUser.Controls.Add($textBox2)

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 295
$System_Drawing_Size.Height = 25
$textBox1.Size = $System_Drawing_Size
$textBox1.DataBindings.DefaultDataSourceUpdateMode = 0
$textBox1.ReadOnly = $True
$textBox1.Name = "textBox1"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 113
$System_Drawing_Point.Y = 56
$textBox1.Location = $System_Drawing_Point
$textBox1.TabIndex = 15

$tabPageCreateUser.Controls.Add($textBox1)

$label28.TabIndex = 14
$label28.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label28.Size = $System_Drawing_Size
$label28.Text = "Homedrive"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 582
$label28.Location = $System_Drawing_Point
$label28.DataBindings.DefaultDataSourceUpdateMode = 0
$label28.Name = "label28"

$tabPageCreateUser.Controls.Add($label28)

$label27.TabIndex = 13
$label27.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label27.Size = $System_Drawing_Size
$label27.Text = "Email"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 539
$label27.Location = $System_Drawing_Point
$label27.DataBindings.DefaultDataSourceUpdateMode = 0
$label27.Name = "label27"

$tabPageCreateUser.Controls.Add($label27)

$label26.TabIndex = 12
$label26.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label26.Size = $System_Drawing_Size
$label26.Text = "DDI"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 492
$label26.Location = $System_Drawing_Point
$label26.DataBindings.DefaultDataSourceUpdateMode = 0
$label26.Name = "label26"

$tabPageCreateUser.Controls.Add($label26)

$label25.TabIndex = 11
$label25.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label25.Size = $System_Drawing_Size
$label25.Text = "Country"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 447
$label25.Location = $System_Drawing_Point
$label25.DataBindings.DefaultDataSourceUpdateMode = 0
$label25.Name = "label25"

$tabPageCreateUser.Controls.Add($label25)

$label24.TabIndex = 10
$label24.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label24.Size = $System_Drawing_Size
$label24.Text = "Location"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 404
$label24.Location = $System_Drawing_Point
$label24.DataBindings.DefaultDataSourceUpdateMode = 0
$label24.Name = "label24"

$tabPageCreateUser.Controls.Add($label24)

$label23.TabIndex = 9
$label23.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label23.Size = $System_Drawing_Size
$label23.Text = "Company"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 361
$label23.Location = $System_Drawing_Point
$label23.DataBindings.DefaultDataSourceUpdateMode = 0
$label23.Name = "label23"

$tabPageCreateUser.Controls.Add($label23)

$label22.TabIndex = 8
$label22.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label22.Size = $System_Drawing_Size
$label22.Text = "Department"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 6
$System_Drawing_Point.Y = 315
$label22.Location = $System_Drawing_Point
$label22.DataBindings.DefaultDataSourceUpdateMode = 0
$label22.Name = "label22"

$tabPageCreateUser.Controls.Add($label22)

$label21.TabIndex = 7
$label21.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label21.Size = $System_Drawing_Size
$label21.Text = "Job Title"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 271
$label21.Location = $System_Drawing_Point
$label21.DataBindings.DefaultDataSourceUpdateMode = 0
$label21.Name = "label21"

$tabPageCreateUser.Controls.Add($label21)

$label20.TabIndex = 6
$label20.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label20.Size = $System_Drawing_Size
$label20.Text = "Manager"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 228
$label20.Location = $System_Drawing_Point
$label20.DataBindings.DefaultDataSourceUpdateMode = 0
$label20.Name = "label20"

$tabPageCreateUser.Controls.Add($label20)

$label19.TabIndex = 5
$label19.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label19.Size = $System_Drawing_Size
$label19.Text = "Full Name"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 184
$label19.Location = $System_Drawing_Point
$label19.DataBindings.DefaultDataSourceUpdateMode = 0
$label19.Name = "label19"

$tabPageCreateUser.Controls.Add($label19)

$label18.TabIndex = 4
$label18.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label18.Size = $System_Drawing_Size
$label18.Text = "Last Name"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 143
$label18.Location = $System_Drawing_Point
$label18.DataBindings.DefaultDataSourceUpdateMode = 0
$label18.Name = "label18"

$tabPageCreateUser.Controls.Add($label18)

$label17.TabIndex = 3
$label17.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label17.Size = $System_Drawing_Size
$label17.Text = "First Name"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 99
$label17.Location = $System_Drawing_Point
$label17.DataBindings.DefaultDataSourceUpdateMode = 0
$label17.Name = "label17"

$tabPageCreateUser.Controls.Add($label17)

$label16.TabIndex = 2
$label16.TextAlign = 16
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 100
$System_Drawing_Size.Height = 23
$label16.Size = $System_Drawing_Size
$label16.Text = "Username"

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 7
$System_Drawing_Point.Y = 57
$label16.Location = $System_Drawing_Point
$label16.DataBindings.DefaultDataSourceUpdateMode = 0
$label16.Name = "label16"

$tabPageCreateUser.Controls.Add($label16)


$checkBoxDisabledUser.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 123
$System_Drawing_Size.Height = 24
$checkBoxDisabledUser.Size = $System_Drawing_Size
$checkBoxDisabledUser.TabIndex = 1
$checkBoxDisabledUser.Text = "Disabled"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 285
$System_Drawing_Point.Y = 7
$checkBoxDisabledUser.Location = $System_Drawing_Point
$checkBoxDisabledUser.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBoxDisabledUser.Name = "checkBoxDisabledUser"


$tabPageCreateUser.Controls.Add($checkBoxDisabledUser)


$checkBoxRoUser.UseVisualStyleBackColor = $True
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 133
$System_Drawing_Size.Height = 24
$checkBoxRoUser.Size = $System_Drawing_Size
$checkBoxRoUser.TabIndex = 0
$checkBoxRoUser.Text = "Romanian User"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 134
$System_Drawing_Point.Y = 7
$checkBoxRoUser.Location = $System_Drawing_Point
$checkBoxRoUser.DataBindings.DefaultDataSourceUpdateMode = 0
$checkBoxRoUser.Name = "checkBoxRoUser"


$tabPageCreateUser.Controls.Add($checkBoxRoUser)





#endregion Generated Form Code

#Save the initial state of the form
$InitialFormWindowState = $form1.WindowState
#Init the OnLoad event to correct the initial state of the form
$form1.add_Load($OnLoadForm_StateCorrection)
#Show the Form
$form1.ShowDialog()| Out-Null

} #End Function

#Call the Function
GenerateForm
